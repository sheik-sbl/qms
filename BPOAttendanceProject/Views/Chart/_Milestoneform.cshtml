@model   BPOAttendanceProject.Models.MilestonespecificationModel  
@{
    int i = 0;
}


@using (Html.BeginForm("SaveMilestone", "Chart", FormMethod.Post, new { @id = "form" }))
{
       
        
    <div class="modal-content">
        <div class="modal-body">
            <div>
                <div>
                    <!-- BEGIN SAMPLE FORM PORTLET-->
                    <div class="portlet light bordered">
                        <div class="m-heading-1 border-green m-bordered">
                            <div class="caption font-dark">
                                @if (Model.MilestoneModel.milestoneid==0)
                                {
                                <span class="caption-subject bold uppercase">Add Milestone Details  </span>
                                }
                                else
                                {
                                     <span class="caption-subject bold uppercase">Edit Milestone Details </span>
                                }
                            </div>
                        </div>

                        <div class="portlet-body form">
                            <div class="form-horizontal">
                                <div class="form-body">
                                    <div class="row" style="border-bottom: 1px solid #eef1f5;">
                                        <div class="col-md-4">


                                            <div class="form-group">
                                                <label class="col-md-4 control-label">Project Id </label>
                                                <div class="col-md-8 valid-group">
                                                    <div class="input-group">
                                                        <span class="input-group-addon">
                                                            <i class="fa fa-envelope"></i>
                                                        </span>
                                                    @Html.HiddenFor(model => model.MilestoneModel.milestoneid)
                                                    @Html.TextBoxFor(model => model.MilestoneModel.projectid, new { @id = "txtProjectId", @class = "form-control", @placeholder = "Id",  @autocomplete = "off", @required = "required",@maxlength = "20" })

                                              
                                                    </div>
                                                </div>
                                            </div>

                                      

                                            <div class="form-group">
                                                <label class="col-md-4 control-label">Project Name</label>
                                                <div class="col-md-8 valid-group">
                                                    <div class="input-group">
                                                        <span class="input-group-addon">
                                                            <i class="fa fa-envelope"></i>
                                                        </span>
                                                  @Html.TextBoxFor(model => model.MilestoneModel.projectname, new { @id = "txtProjectname", @class = "form-control", @placeholder = "Name",@maxlength = "20",  @autocomplete = "off", @required = "required" })

                                                    </div>
                                                </div>
                                            </div>

                                        </div>
                                        <div class="col-md-4">
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">No of Batches</label>
                                                <div class="col-md-8 valid-group">
                                                    <div class="input-group">
                                                        <span class="input-group-addon">
                                                            <i class="fa fa-envelope"></i>
                                                        </span>
                                                        @Html.TextBoxFor(model => model.MilestoneModel.TotalBatches, new {  @id = "txtbatch", @class = "form-control",@maxlength = "15", @placeholder = "Code",  @autocomplete = "off", @required = "required",onkeypress = "return isNumber(event)" })
                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="col-md-4 control-label">Images</label>
                                                <div class="col-md-8 valid-group">
                                                    <div class="input-group">
                                                        <span class="input-group-addon">
                                                            <i class="fa fa-envelope"></i>
                                                        </span>

                                                        @Html.TextBoxFor(model => model.MilestoneModel.TotalImages, new { @id = "txtimage",@maxlength = "15", @class = "form-control",  @autocomplete = "off", @required = "required",onkeypress = "return isNumber(event)" })





                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                        <div class="col-md-4">
                                            <div class="form-group">
                                                <label class="col-md-4 control-label">Expected Character</label>
                                                <div class="col-md-8 valid-group">
                                                    <div class="input-group">
                                                        <span class="input-group-addon">
                                                            <i class="fa fa-envelope"></i>
                                                        </span>
                                                    
                                                        @Html.TextBoxFor(model => model.MilestoneModel.ExpCharacter, new {@type="number", @id = "txtExpcharacter", @class = "form-control",@maxlength = "10", @autocomplete = "off", @required = "required",onkeypress = "return isNumber(event)" })

                                                    </div>
                                                </div>
                                            </div>

                                            <div class="form-group">
                                                <label class="col-md-4 control-label">Expected Records</label>
                                                <div class="col-md-8 valid-group">
                                                    <div class="input-group">
                                                        <span class="input-group-addon">
                                                            <i class="fa fa-envelope"></i>
                                                        </span>
                                                     @Html.TextBoxFor(model => model.MilestoneModel.ExpRecords, new { @id = "txtExprecord", @class = "form-control", @placeholder = "Code", @maxlength = "10", @autocomplete = "off", @required = "required" ,onkeypress = "return isNumber(event)"})

                                                    </div>
                                                </div>
                                            </div>
                                        </div>


                                    </div>

                               

                                </div>
                            </div>
                        </div>





                    </div>
                    <!-- END SAMPLE FORM PORTLET-->
                </div>

            </div>



            <div class="portlet light bordered">
                <div class="row" style="margin-bottom: 15px;">
                    <div class="form-group">
                        <div class="col-md-4">


                            <div class="form-group">

                                <label class="col-md-3 control-label">Milestone Name</label>
                                <div class="col-md-7">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-envelope"></i>
                                        </span>


                                       @Html.TextBox("txtmilestonename","", new { @id = "txtmilestonename", @class = "form-control",@maxlength = "30",  @autocomplete = "off" })


                                    </div>


                                </div>
                            </div>


                        </div>
                      
                       <div class="col-md-4">


                            <div class="form-group">

                                <label class="col-md-3 control-label">Date</label>
                                <div class="col-md-7">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-envelope"></i>
                                        </span>

                                        <input class="date form-control" style="width: 125px;" type="text" id="from" name="from">
                                         
                                    </div>
                                    <span style="color:blue"   class="help-block">Date format is mm/dd/yyyy. </span>

                                </div>
                            </div>


                        </div>
                        
                        
                       <div class="col-md-4">
                            <div class="form-group">

                                <label class="col-md-3 control-label">Character</label>
                                <div class="col-md-7">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-envelope"></i>
                                        </span>
                                        @Html.TextBox("txtcharacter", "", new { @id = "txtcharacter",@maxlength = "6" ,@class = "form-control", @autocomplete = "off", onkeypress = "return isNumber(event)" })

                                    </div>
                                </div>
                                <div class="col-md-1">
                                    @*  <button type="button" class="btn green" id="btnAddItem">ADD</button>*@
                                    <button type="button" class="btn item" id="btnValidate" onclick="AddItem()">ADD</button>
                                </div>
                            </div>
                        </div>
                    
                    
                    
                    
                    </div>
                </div>


                <div class="row">
                    <div class="form-group valid-group" style="padding: 10px">

                        <table class="table table-striped table-bordered table-hover table-checkable order-column" id="tblitems">
                            <thead>
                                <tr class="odd gradeX">


                                    <th> Name </th>
                                    <th> Date </th>
                                    <th> Character/Record </th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            @if (Model.MilestoneModel.LstItems.Count > 0)
                            {
                                <tbody>
                                    @foreach (var mile in Model.MilestoneModel.LstItems)
                                    {
                                        <tr>

                                            <td>@mile.milestonename</td>
                                            <td>@mile.milestonedate</td>
                                            <td>@mile.milestonereccharact</td>
                                            <td>
                                            <button title="Remove Item" class="btn btn-xs red" type="button" onclick="RemoveItem('@mile.milestonename','@mile.milestonedate',this)">X</button></td>
                                            <input class="name" type="hidden" name="MilestoneModel.LstItems[@i].milestonename" value="@mile.milestonename"/>
                                            <input class="date" type="hidden" name="MilestoneModel.LstItems[@i].milestonedate" value="@mile.milestonedate" />
                                            <input class="character" type="hidden" name="MilestoneModel.LstItems[@i].milestonereccharact" value="@mile.milestonereccharact" />
                                        </tr>
                                        i++;
                                    }


                                </tbody>
                            }
                        </table>


                    </div>
                </div>


            </div>














        </div>
        <div class="modal-footer">

            <button type="button" class="btn dark btn-outline" data-dismiss="modal">Cancel</button>
            <button type="submit" class="btn green">Save</button>
        </div>


        <!-- /.modal-content -->
    </div>
}
<script>

    $(function () {

        $("#from").datepicker({
            format: 'mm/dd/yyyy',
            minDate: 0,
            defaultDate: "+1w",
            changeMonth: true,
            numberOfMonths: 1,


        });

       



        //$("#from").datepicker("setDate", new Date());

        //var date = new Date();
        //date.setTime(date.getTime() - (1000 * 60 * 60 * 24))
        //$('#from').datepicker("setDate", date);
        $('#from').datepicker({ autoclose: true });

    });




    function AddItem() {
        $('#tblitems').closest('.valid-group').find('.tableerror').remove();
       
        var milestonename = document.getElementById("txtmilestonename").value;
      
        if (milestonename == "") {

            swal({
                title: "Please add Name!!!",
                confirmButtonClass: "btn-danger",
            })
            return false;
        }
        var milesdate = document.getElementById("from").value;
        if (milesdate == "") {

            swal({
                title: "Please add Date!!!",
                confirmButtonClass: "btn-danger",
            })
            return false;
        }

        var milescharacter = document.getElementById("txtcharacter").value;
        if (milescharacter == "") {

            swal({
                title: "Please add Character!!!",
                confirmButtonClass: "btn-danger",
            })
            return false;
        }


        var allreadyExist = false;
        var MilestoneName = $("#txtmilestonename").val();
        
        debugger;
        $('#tblitems tr').each(function (i, row) {

            
            if ($(row).find('td:eq(0)').text() == MilestoneName) {
                allreadyExist = true;
                return false;
            }

        });
        if (allreadyExist) {
            swal({
                title: "Milestone already added!!",
                confirmButtonClass: "btn-danger",
            })
            return false;
        }
        /*
        <input id="PackingspecificationDetails_8__ItemId" name="PackingspecificationDetails[8].ItemId" type="hidden" value=""> 
        */
        debugger;
        var totalRows = $('#tblitems tr').length - 1;
        $('#tblitems').append('<tr><td><input class="item"  name="MilestoneModel.LstItems[' + totalRows + '].milestonename" type="hidden" value="' + $('#txtmilestonename').val() + '">' + $('#txtmilestonename').val() +
            '</td><td><input   class="qty" name="MilestoneModel.LstItems[' + totalRows + '].milestonedate" type="hidden" value="' + $('#from').val() + '" >' + $('#from').val() + '</td><td><input   class="qty" name="MilestoneModel.LstItems[' + totalRows + '].milestonereccharact" type="hidden" value="' + $('#txtcharacter').val() + '" >' + $('#txtcharacter').val() + '</td>'
           +
             '<td><button title="Remove Item" class="btn btn-xs red" type="button" onclick="RemoveItem(' + $('#txtmilestonename').val() + ',\'' + $('#txtmilestonename').val() + '\',this)">X</button>' + '</td></tr>');

        document.getElementById("from").value = "";
        document.getElementById("txtmilestonename").value = "";
        document.getElementById("txtcharacter").value = "";

    }


    $(function () {
        $("#form").validate({

            rules: {
                TotalImages: {
                    required: true,
                    min: 1,
                    number: true
                },
                TotalBatches: {
                    required: true,
                    min: 1,
                    number: true
                }
               
            },

            messages: {
                TotalImages: {
                    required: "Image count is required and value should be greater than 0 ."
                },
                TotalBatches: {
                    required: "Batch Name is required and value should be greater than 0."
                }
            },






            invalidHandler: function (event, validator) {
                $('.alert-danger', $('#form')).show();
                if ($('#tblitems').find('tbody tr').length == 0) {
                    $('#tblitems').closest('.valid-group').find('.tableerror').remove();
                    $('#tblitems').closest('.valid-group').append('<label class="text-danger tableerror">Add atleast one item</label>');
                }

            },
            highlight: function (element) { // hightlight error inputs
                $(element).closest('.valid-group').addClass('has-error'); // set error class to the control group
            },
            success: function (label) {
                label.closest('.valid-group').removeClass('has-error');
                label.remove();
            },

            errorPlacement: function (error, element) {
                error.addClass('text-danger');
                error.insertAfter(element.closest('.input-group'));
            },

            submitHandler: function (form) {
                var succitem = true;


                if ($('#tblitems').find('tbody tr').length == 0) {
                    $('#tblitems').closest('.valid-group').find('.tableerror').remove();
                    $('#tblitems').closest('.valid-group').append('<label class="text-danger tableerror">Add atleast one item</label>');
                    succitem = false;
                }
                else {
                    $('#tblitems').closest('.valid-group').find('.tableerror').remove();
                }


                if (succitem) {
                    var batchno = $('#txtbatch').val();
                    var imagecount = $('#txtimage').val();
                    var expcharacter = $('#txtExpcharacter').val();
                    if (batchno == 0 || imagecount == 0 || expcharacter == 0) {
                        alert("Please fill the required fields with value greater than 0");
                    }
                    else {
                        form.submit();
                    }
                }
            }



        });

    });


    function CheckAccessCodeAlreadyExist(object) {


        var TableName = "mpackingspecification";
        var ColumnName = "Code";
        var Value = $("#txtCode").val();
        if (Value.length > 0) {
            var pathurl = '@Url.Action("CheckStringWithOneColumn", "Admin")';
            $.ajax({
                url: pathurl,
                type: 'POST',
                data: { ActualTableName: TableName, ActualColumnName: ColumnName, ActualValue: Value },
                success: function (data) {

                    if (data == "true") {
                        swal("PackingSpecification Code already exist !");
                        $(object).val("");
                        $(object).focus();
                    }
                }
            });
        }

    }



    







    function isNumber(evt) {
        evt = (evt) ? evt : window.event;
        var charCode = (evt.which) ? evt.which : evt.keyCode;
        if (charCode > 31 && (charCode < 45 || charCode > 57)) {
            return false;
        }
        return true;
    }
    function RemoveItem(milestonename, mledate, btnobj) {
        swal({
            title: "Do you really want to remove item ?",
            showCancelButton: true,
            confirmButtonClass: "btn-danger",
            confirmButtonText: "Remove",
            closeOnConfirm: true,
        },
    function () {
       

        var parentrow = $(btnobj).parent().parent();
        var startindex = parentrow.index();
        $('#tblitems tbody tr').each(function () {
            if (parentrow.index() < $(this).index()) {
                $(this).find('.item').attr('name', 'MilestoneModel.LstItems[' + startindex + '].milestonename')
                $(this).find('.qty').attr('name', 'MilestoneModel.LstItems[' + startindex + '].milestonedate')

                startindex = startindex + +1;
            }
        });

        parentrow.remove();

        $('#tbldetails tbody tr').each(function () {

         

            if ($(this).attr('milestonename') == milestonename) {

                $(this).remove();
            }
        });
    });

    }















</script>

<style>
    .sweet-overlay {
        z-index: 20000;
    }

    .sweet-alert {
        z-index: 20000;
    }
</style>

